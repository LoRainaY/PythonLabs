"""1. В ходе сортировки элементы меняют местами, поэтому в первую очередь рассмотрим 2 способа перестановки двух элементов A[i] и A[j]:
1.1. «правило трех стаканов», работающее в большинстве языков программирования:
	a = A[i]
	A[i] = A[j]
	A[j] = a
1.2. перестановка с помощью кортежей, работающая в Python:
	A[i], A[j] = A[j], A[i]

2. Функция для сортировки пузырьком bubble:
Цикл 1 – по i от 0 до N-1 :				# i - счетчик проходов по списку
	Цикл 2 – по j от 0 до N-1-i :			# j - текущая позиция при проходе по списку
		Условие – если A[j]>A[j+1] :	# сравнение текущего элемента со следующим
			Действие – перестановка местами A[j] и A[j+1]"""

nums = [1, 2, 6, 4, 7, 5, 3]


def BubbleSort(A):  # сортировка пузырьком
    for i in range(len(A)):
        for j in range(len(A) - 1 - i):
            if A[j] > A[j + 1]:
                a = A[j]
                A[j] = A[j + 1]
                A[j + 1] = a


BubbleSort(nums)
print(nums)

"""2. Функция сортировки вставками insert:
Цикл 1 – по i от 1 до (len(A)):					# i - текущая позиция при проходе по списку
	Действие – сохранение t = A[i]		# A[i] - вставляемый элемент
	Действие – новая  переменная j = i 	# j - позиция в отсортированной части списка
	Цикл 2 – по j до 0 и A[j-1]  > t:		# j - смещается справа налево, от больших к меньшим
		То A[j] = A[j-1] 				       # эл-ты отсортированной части, большие вставляемого
		И  j -= 1 			       			# уступают место – сдвигаются (копируются) вправо
	Иначе – выход из цикла 2		       # j остановится на посл. эл-те, большем вставляемого
	Действие – A[j] = t			              ы# вставляемый эл-т ставится на освободившееся место
                                                                          место
"""

str = ["Bob", "Alex", "Светлана", "Анастасия"]  # значения с строками
nums2 = [6, 4, 2, 0, 7, 10]  # значения с числами


def InsertSort(A):
    for i in range(1, len(A)):
        t = A[i]
        j = i
        while j > 0 and A[j - 1] > t:
            A[j] = A[j - 1]
            j -= 1
        A[j] = t


InsertSort(nums2)
InsertSort(str)

print(str)
print(nums2)

"""
3. Функция шейкерной (коктейльной) сортировки shaker - модификации пузырьковой:
Цикл 1 – по i от 0 до N/2 :				# i - счетчик пар проходов по списку, 
										# которых в 2 раза меньше, чем в пузырьковой
	Цикл 2 – по j от i до N-1-i :			# j - номер позиции при проходе по списку слева направо
		Условие – если A[j]>A[j+1] :	# сравнение текущего элемента со следующим
			Действие – перестановка местами A[j] и A[j+1]
	Цикл 3 – по j от N-2-i до i+1 : 		# j - номер позиции при проходе по списку справа налево
		Условие если A[j]<A[j-1] :		# сравнение текущего элемента с предыдущим
			Действие – перестановка местами A[j] и A[j-1]
"""

nums3 = [4, 12, 432, 1, 34, 65, 23]


def CocktailSort(A):
    for i in range(len(A) // 2):
        for j in range(len(A) - 1 - i):
            if A[j] > A[j + 1]:
                t = A[j]
                A[j] = A[j + 1]
                A[j + 1] = t
        for j in range(len(A) - 2 - i, i + 1, -1):
            if A[j] < A[j - 1]:
                temp = A[j]
                A[j] = A[j - 1]
                A[j - 1] = temp


CocktailSort(nums3)
print(nums3)

"""
4. Функция сортировки выбором select:
Цикл 1 – по i от 0 до N-1 :		# i - счетчик прохода по списку
	Действие – объявление переменной m = i;	# m - номер для мин. из неотсортированных
	Цикл 2 – по j от i до N :		# j - счетчик позиции при проходе по неотсортированной части
		Условие если A[j]<A[m] :	 # сравнение текущего элемента с текущим минимальным
			Действие – запоминаем номер обнаруженного нового минимального эл-та m = j
	Действие – перестановка местами A[m] и A[i]
	"""

nums4 = [2, 234, 23, 13, 32, 12, 50]


def SelectSort(A):
    N = len(A)
    for i in range(0, N - 1):
        m = i
        for j in range(i, N):
            if A[j] < A[m]:
                m = j
        t = A[m]
        A[m] = A[i]
        A[i] = t


SelectSort(nums4)
print(nums4)
